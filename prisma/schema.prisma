// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Root {
  id       Int     @id @default(autoincrement())
  avatar   String?
  email    String  @unique
  fullname String? @default("Root")
  password String

  accounts   Account[]
  profiles   Profile[]
  tags       Tags[]
  userGroups UserGroup[]
  users      User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       Int     @id @default(autoincrement())
  avatar   String?
  deleted  Boolean @default(false)
  email    String
  fullname String?
  password String
  username String  @unique

  accounts    Account[]
  profile     Profile   @relation(fields: [profileId], references: [id])
  root        Root      @relation(fields: [rootId], references: [id])
  userGroups  UserGroup @relation(fields: [userGroupId], references: [id])
  profileId   Int
  rootId      Int
  userGroupId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id       Int     @id @default(autoincrement())
  deleted  Boolean @default(false)
  favorite Boolean @default(false)
  name     String? @default("New Account")
  notes    String?
  password String
  private  Boolean @default(true)
  type     String  @default("Credential")
  url      String?
  username String

  user      User?       @relation(fields: [userId], references: [id])
  root      Root?       @relation(fields: [rootId], references: [id])
  userGroup UserGroup[]
  userId    Int?
  rootId    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGroup {
  id          Int     @id @default(autoincrement())
  description String?
  name        String  @unique

  accounts Account[]
  User     User[]
  root     Root      @relation(fields: [rootId], references: [id])
  rootId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  root   Root   @relation(fields: [rootId], references: [id])
  rootId Int
  User   User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String

  root   Root @relation(fields: [rootId], references: [id])
  rootId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
